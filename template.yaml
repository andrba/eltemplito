Transform: AWS::Serverless-2016-10-31

Parameters:
  Product:
    Description: Product name
    Type: String

  Environment:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: development

  SwaggerS3Path:
    Description: An S3 path to swagger.yaml that will be embeded into the API gateway definition
    Type: String

Globals:
  Function:
    Runtime: ruby2.5
    Timeout: 10
    Environment:
      Variables:
        S3_BUCKET: !Ref S3Bucket
        DOCUMENTS_TABLE: !Ref DocumentsDBTable
        STATE_CHANGED_TOPIC: !Ref StateChangedSNSTopic
    Layers:
      - !Ref SharedLayer

Resources:
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      DefinitionBody:
        Fn::Transform:
          Name: 'AWS::Include'
          Parameters:
            Location: !Ref SwaggerS3Path

  CreateDocumentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 'app/create_document/'
      Handler: lambda.CreateDocument::Lambda.handler
      Layers:
        - !Ref CreateDocumentGemsLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref S3Bucket
        - DynamoDBCrudPolicy:
            TableName: !Ref DocumentsDBTable
      Events:
        PostDocumentApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /documents
            Method: POST

  CreateDocumentGemsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: create-document-gems
      ContentUri: layers/create_document/
      CompatibleRuntimes:
        - ruby2.5
      RetentionPolicy: Delete

  ListenDocumentStreamFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 'app/listen_document_stream/'
      Handler: lambda.ListenDocumentStream::Lambda.handler
      Environment:
        Variables:
          DOCUMENT_CREATED_TOPIC: !Ref DocumentCreatedSNSTopic
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt DocumentsDBTable.StreamArn
            BatchSize: 10
            # MaximumBatchingWindowInSeconds: 10
            StartingPosition: LATEST
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DocumentsDBTable
        - SNSPublishMessagePolicy:
            TopicName: !Ref DocumentCreatedSNSTopic
        - SNSPublishMessagePolicy:
            TopicName: !Ref StateChangedSNSTopic

  DispatchrFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 'app/dispatchr/'
      Handler: lambda.Dispatchr::Lambda.handler
      Environment:
        Variables:
          RENDER_TEMPLATE_FUNCTION: !Ref RenderTemplateFunction
          GENERATE_PDF_FUNCTION: !Ref GeneratePdfFunction
      Events:
        StateChangedTopic:
          Type: SNS
          Properties:
             Topic: !Ref StateChangedSNSTopic
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DocumentsDBTable
        - LambdaInvokePolicy:
            FunctionName: !Ref RenderTemplateFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref GeneratePdfFunction

  RenderTemplateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 'app/render_template/'
      Handler: lambda.RenderTemplate::Lambda.handler
      Layers:
        - !Ref RenderTemplateRubyGemsLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref S3Bucket
        - SNSPublishMessagePolicy:
            TopicName: !Ref StateChangedSNSTopic

  RenderTemplateRubyGemsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: render-template-gems
      ContentUri: layers/render_template/
      CompatibleRuntimes:
        - ruby2.5
      RetentionPolicy: Delete

  GeneratePdfFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 'app/generate_pdf/'
      Handler: lambda.GeneratePdf::Lambda.handler
      Timeout: 60
      MemorySize: 1024
      Layers:
        - arn:aws:lambda:ap-southeast-2:764866452798:layer:libreoffice:1
        - !Ref GeneratePdfRubyGemsLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref S3Bucket
        - SNSPublishMessagePolicy:
            TopicName: !Ref StateChangedSNSTopic

  GeneratePdfRubyGemsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: generage-pdf-gems
      ContentUri: layers/generate_pdf/
      CompatibleRuntimes:
        - ruby2.5
      RetentionPolicy: Delete

  SharedLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: shared
      ContentUri: layers/shared/
      CompatibleRuntimes:
        - ruby2.5
      RetentionPolicy: Delete

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub "${Product}-${Environment}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          -
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          -
            ExpirationInDays: 14
            Status: Enabled

  DocumentsDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  DocumentCreatedSNSTopic:
    Type: AWS::SNS::Topic

  StateChangedSNSTopic:
    Type: AWS::SNS::Topic

  # DeadLetterQueue:
  #   Type: AWS::SQS::Queue
  #   Properties:
  #     MessageRetentionPeriod: 1209600

  # S3BucketSSMParameter:
  #   Type: AWS::SSM::Parameter
  #   Properties:
  #     Description : "S3 Bucket"
  #     Name: !Sub "/${Product}/${Environment}/S3_BUCKET"
  #     Type: String
  #     Value: !Ref S3Bucket

  # DocumentsSNSTopicSSMParameter:
  #   Type: AWS::SSM::Parameter
  #   Properties:
  #     Description : "Documents SNS Topic"
  #     Name: !Sub "/${Product}/${Environment}/DOCUMENTS_SNS_TOPIC"
  #     Type: String
  #     Value: !Ref DocumentsSNSTopic

  # DeadLetterQueueDepthAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmDescription: "Alarm if DLQs contain messages"
  #     Namespace: "AWS/SQS"
  #     MetricName: ApproximateNumberOfMessagesVisible
  #     Dimensions:
  #       - Name: LetterQueueName
  #         Value : !GetAtt DeadLetterQueue.QueueName
  #     Statistic: Sum
  #     Period: 300
  #     EvaluationPeriods: 1
  #     Threshold: 0
  #     ComparisonOperator: GreaterThanThreshold
