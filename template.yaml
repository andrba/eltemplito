Transform: AWS::Serverless-2016-10-31

Parameters:
  Product:
    Description: Product name
    Type: String

  Environment:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: development

Globals:
  Function:
    Runtime: ruby2.5
    Timeout: 10
    Environment:
      Variables:
        S3_BUCKET: !Ref S3Bucket
        DOCUMENTS_TABLE: !Ref DocumentsDBTable

Resources:
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      DefinitionUri: ./swagger.yaml

  CreateDocumentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 'app/create_document/'
      Handler: lambda.CreateDocument::Lambda.handler
      Layers:
        - !Ref CreateDocumentGemsLayer
        - !Ref SharedLayer
      Policies: AWSLambdaDynamoDBExecutionRole
      Events:
        PostDocumentApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /documents
            Method: POST

  CreateDocumentGemsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: create-document-gems
      ContentUri: .layers/create_document/
      CompatibleRuntimes:
        - ruby2.5
      RetentionPolicy: Delete


  # DispatchEventFunction:
  #   Type: AWS::Serverless::Function
  #     Properties:
  #       CodeUri: 'app/dispatch_event/'
  #       Handler: lambda.CreateDocument::Lambda.handler
  #       Events:
  #         Stream:
  #           Type: DynamoDB
  #           Properties:
  #             Stream: !GetAtt DocumentsDBTable.StreamArn
  #             BatchSize: 10
  #             # MaximumBatchingWindowInSeconds: 10
  #             StartingPosition: LATEST
  #       Policies: AWSLambdaDynamoDBExecutionRole

  # RendererTemplateFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: 'app/render_template/'
  #     Handler: lambda.RenderTemplate::Lambda.handler
  #     Layers:
  #       - !Ref RenderTemplateRubyGemsLayer
  #       - !Ref SharedLayer
  #     Policies:
  #       - S3CrudPolicy:
  #           BucketName: !Ref S3Bucket
  #       - SNSPublishMessagePolicy:
  #           TopicName: !GetAtt DocumentsSNSTopic.TopicName

  # RenderTemplateRubyGemsLayer:
  #   Type: AWS::Serverless::LayerVersion
  #   Properties:
  #     LayerName: render-template-gems
  #     ContentUri: .layers/render_template/
  #     CompatibleRuntimes:
  #       - ruby2.5
  #     RetentionPolicy: Delete

  # GeneratePDFFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: 'app/generate_pdf/'
  #     Handler: lambda.GeneratePDF::Lambda.handler
  #     MemorySize: 512
  #     Layers:
  #       - arn:aws:lambda:ap-southeast-2:764866452798:layer:libreoffice:1
  #       - !Ref GeneratePDFRubyGemsLayer
  #       - !Ref SharedLayer
  #       - !Ref LibLayer
  #     Policies:
  #       - S3CrudPolicy:
  #           BucketName: !Ref S3Bucket

  # GeneratePDFRubyGemsLayer:
  #   Type: AWS::Serverless::LayerVersion
  #   Properties:
  #     LayerName: generage-pdf-gems
  #     ContentUri: .layers/generate_pdf/
  #     CompatibleRuntimes:
  #       - ruby2.5
  #     RetentionPolicy: Delete

  SharedLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: shared
      ContentUri: .layers/shared/
      CompatibleRuntimes:
        - ruby2.5
      RetentionPolicy: Delete

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub "${Product}-${Environment}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          -
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          -
            ExpirationInDays: 14
            Status: Enabled

  DocumentsDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # DocumentsSNSTopic:
  #   Type: AWS::SNS::Topic

  # DeadLetterQueue:
  #   Type: AWS::SQS::Queue
  #   Properties:
  #     MessageRetentionPeriod: 1209600

  # S3BucketSSMParameter:
  #   Type: AWS::SSM::Parameter
  #   Properties:
  #     Description : "S3 Bucket"
  #     Name: !Sub "/${Product}/${Environment}/S3_BUCKET"
  #     Type: String
  #     Value: !Ref S3Bucket

  # DocumentsSNSTopicSSMParameter:
  #   Type: AWS::SSM::Parameter
  #   Properties:
  #     Description : "Documents SNS Topic"
  #     Name: !Sub "/${Product}/${Environment}/DOCUMENTS_SNS_TOPIC"
  #     Type: String
  #     Value: !Ref DocumentsSNSTopic

  # DeadLetterQueueDepthAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmDescription: "Alarm if DLQs contain messages"
  #     Namespace: "AWS/SQS"
  #     MetricName: ApproximateNumberOfMessagesVisible
  #     Dimensions:
  #       - Name: LetterQueueName
  #         Value : !GetAtt DeadLetterQueue.QueueName
  #     Statistic: Sum
  #     Period: 300
  #     EvaluationPeriods: 1
  #     Threshold: 0
  #     ComparisonOperator: GreaterThanThreshold
